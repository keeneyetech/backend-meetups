// Code generated by MockGen. DO NOT EDIT.
// Source: ports.go

// Package sayhello_test is a generated GoMock package.
package sayhello_test

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIPStack is a mock of IPStack interface
type MockIPStack struct {
	ctrl     *gomock.Controller
	recorder *MockIPStackMockRecorder
}

// MockIPStackMockRecorder is the mock recorder for MockIPStack
type MockIPStackMockRecorder struct {
	mock *MockIPStack
}

// NewMockIPStack creates a new mock instance
func NewMockIPStack(ctrl *gomock.Controller) *MockIPStack {
	mock := &MockIPStack{ctrl: ctrl}
	mock.recorder = &MockIPStackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPStack) EXPECT() *MockIPStackMockRecorder {
	return m.recorder
}

// GetCountryCode mocks base method
func (m *MockIPStack) GetCountryCode(IP string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountryCode", IP)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountryCode indicates an expected call of GetCountryCode
func (mr *MockIPStackMockRecorder) GetCountryCode(IP interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountryCode", reflect.TypeOf((*MockIPStack)(nil).GetCountryCode), IP)
}

// MockDB is a mock of DB interface
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Hit mocks base method
func (m *MockDB) Hit(IP string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hit", IP)
	ret0, _ := ret[0].(error)
	return ret0
}

// Hit indicates an expected call of Hit
func (mr *MockDBMockRecorder) Hit(IP interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hit", reflect.TypeOf((*MockDB)(nil).Hit), IP)
}

// MockClock is a mock of Clock interface
type MockClock struct {
	ctrl     *gomock.Controller
	recorder *MockClockMockRecorder
}

// MockClockMockRecorder is the mock recorder for MockClock
type MockClockMockRecorder struct {
	mock *MockClock
}

// NewMockClock creates a new mock instance
func NewMockClock(ctrl *gomock.Controller) *MockClock {
	mock := &MockClock{ctrl: ctrl}
	mock.recorder = &MockClockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClock) EXPECT() *MockClockMockRecorder {
	return m.recorder
}

// Now mocks base method
func (m *MockClock) Now() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(string)
	return ret0
}

// Now indicates an expected call of Now
func (mr *MockClockMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockClock)(nil).Now))
}
